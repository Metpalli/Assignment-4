/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Model.Patient;
import Model.Person;
import Model.PersonDirectory;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author sundermetpalli
 */
public class CreatePatient{

    /**
     * Creates new form CreatePatient
     */
    
    public CreatePatient(PersonDirectory personDirectory) {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientDetailsTable = new javax.swing.JTable();
        txtCity = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        txtComm = new javax.swing.JTextField();
        lblComm = new javax.swing.JLabel();
        lblFN = new javax.swing.JLabel();
        lblHouse = new javax.swing.JLabel();
        txtFN = new javax.swing.JTextField();
        txtHouse = new javax.swing.JTextField();
        lblLN = new javax.swing.JLabel();
        btnView = new javax.swing.JButton();
        txtLN = new javax.swing.JTextField();
        lblAge = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        lblPatientID = new javax.swing.JLabel();
        txtPatientID = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        txtHouseUpdate = new javax.swing.JTextField();
        txtFNUpdate = new javax.swing.JTextField();
        txtPatientIDUpdate = new javax.swing.JTextField();
        txtCommUpdate = new javax.swing.JTextField();
        txtAgeUpdate = new javax.swing.JTextField();
        txtCityUpdate = new javax.swing.JTextField();
        txtLNUpdate = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        txtPIDnew = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        lblPIDnew = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
      
      

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        int selectedRow= patientDetailsTable.getSelectedRow();
        
        Person person1=(Person) patientDetailsTable.getValueAt(selectedRow, 0);
        
        if(person1.getPatient()!=null)
        {
            JOptionPane.showMessageDialog(this, "Paient already exists.");
            return;
        }
        else
        {
        DefaultTableModel model= (DefaultTableModel) patientDetailsTable.getModel();
        Patient patient = new Patient();
        patient.setPatientID(txtPIDnew.getText());
        person=person1;
        person.setPatient(patient);
        JOptionPane.showMessageDialog(this, "Patient Details are added! Proceed to check vital signs!");  
        populateTable();
        }

        
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        
        int selectedRow= patientDetailsTable.getSelectedRow();

        Person person=(Person) patientDetailsTable.getValueAt(selectedRow, 0);
        Patient patient=person.getPatient();
        if(patient==null)
        {
            JOptionPane.showMessageDialog(this, "Patient not created. Cannot delete");
            return;
        }
        else
        {
            person.setPatient(null);
            populateTable();
        }
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void patientDetailsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientDetailsTableMouseClicked

    }//GEN-LAST:event_patientDetailsTableMouseClicked

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel model= (DefaultTableModel) patientDetailsTable.getModel();
        Person selectedPerson= (Person)model.getValueAt(selectedRowIndex, 0);
        Patient patient=selectedPerson.getPatient();
        
        if(patient!=null){
        txtFN.setText(selectedPerson.getFirstName());
        txtLN.setText(selectedPerson.getLastName());
        txtComm.setText(selectedPerson.getCommunity());
        txtAge.setText(String.valueOf(selectedPerson.getAge()));
        txtCity.setText(selectedPerson.getCity());
        txtHouse.setText(String.valueOf(selectedPerson.getHouse()));
        txtPatientID.setText(selectedPerson.getPatient().getPatientID()+"");
        txtFNUpdate.setText(selectedPerson.getFirstName());
        txtLNUpdate.setText(selectedPerson.getLastName());
        txtCommUpdate.setText(selectedPerson.getCommunity());
        txtAgeUpdate.setText(String.valueOf(selectedPerson.getAge()));
        txtCityUpdate.setText(selectedPerson.getCity());
        txtHouseUpdate.setText(String.valueOf(selectedPerson.getHouse()));
        txtPatientIDUpdate.setText(selectedPerson.getPatient().getPatientID()+"");
        }
        else
        {
        JOptionPane.showMessageDialog(this, "Patient not created.");
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:

        int selectedRow= patientDetailsTable.getSelectedRow();
        
        Person person1=(Person) patientDetailsTable.getValueAt(selectedRow, 0);

        
        person1.setFirstName(txtFNUpdate.getText());
        person1.setLastName(txtLNUpdate.getText());
        person1.setAge(Integer.parseInt(txtAgeUpdate.getText()));
        person1.setCity(txtCityUpdate.getText());
        person1.setCommunity(txtCommUpdate.getText());
        person1.setHouse(Integer.parseInt(txtHouseUpdate.getText()));
        txtFNUpdate.setText("");
        txtLNUpdate.setText("");
        txtAgeUpdate.setText("");
        txtCityUpdate.setText("");
        txtCommUpdate.setText("");
        txtHouseUpdate.setText("");

    }//GEN-LAST:event_btnUpdateActionPerformed

private void populateTable() {
        DefaultTableModel model= (DefaultTableModel) patientDetailsTable.getModel();
        model.setRowCount(0);
        for(Person p : personDirectory.getPersonHistory()){
        Object[] row=new Object[8];
        row[0]=p;
        row[1]=p.getLastName();
        row[2]=p.getAge();
        row[3]=p.getCity();
        row[4]=p.getCommunity();
        row[5]=p.getHouse();
        if(p.getPatient()!=null)
        row[6]=p.getPatient().getPatientID();
        else
        row[6]="Patient ID not available.";
        row[7]=p.getStateID();
        model.addRow(row);
        }  
    }


}
