/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Model.EncounterHistory;
import Model.Patient;
import Model.Person;
import Model.PersonDirectory;
import Model.VitalSigns;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author sundermetpalli
 */
public class VitalSign extends javax.swing.JPanel {

    /**
     * Creates new form VitalSign
     */
    private Person person;
     private PersonDirectory personDirectory;
      ArrayList<VitalSigns> vitalsign;
      VitalSigns vitalSign;
      private EncounterHistory encounterHistory;
    public VitalSign(PersonDirectory personDirectory) {
        initComponents();
        ArrayList<Person> personList = personDirectory.getPersonHistory();
        populatePatientsTable(personList);
        populateVitalSignTable(person);
        this.personDirectory=personDirectory;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PersonDetailsTable = new javax.swing.JTable();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnAddVS = new javax.swing.JButton();
        btnViewVS = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        VitalSignsTable = new javax.swing.JTable();
        lblBT = new javax.swing.JLabel();
        lblRR = new javax.swing.JLabel();
        lblBP = new javax.swing.JLabel();
        lblPR = new javax.swing.JLabel();
        txtBT = new javax.swing.JTextField();
        txtRR = new javax.swing.JTextField();
        txtBP = new javax.swing.JTextField();
        txtPR = new javax.swing.JTextField();
        txtStatusBT = new javax.swing.JTextField();
        txtStatusRR = new javax.swing.JTextField();
        txtStatusBP = new javax.swing.JTextField();
        txtStatusPR = new javax.swing.JTextField();
        lblPR1 = new javax.swing.JLabel();
        lblBT1 = new javax.swing.JLabel();
        lblBP1 = new javax.swing.JLabel();
        lblRR1 = new javax.swing.JLabel();
        txtPR1 = new javax.swing.JTextField();
        txtBP1 = new javax.swing.JTextField();
        txtRR1 = new javax.swing.JTextField();
        txtBT1 = new javax.swing.JTextField();
        btnView = new javax.swing.JButton();
        btnViewVSbyComm = new javax.swing.JButton();
        txtSearchCommu = new javax.swing.JTextField();
        cbVS2 = new javax.swing.JComboBox<>();
        lblCom = new javax.swing.JLabel();
        lblCount = new javax.swing.JLabel();
        txtCount = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 102, 102));

        lblTitle.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("PATIENTS VITAL SIGNS RECORD");

        PersonDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Age", "City", "Community", "House", "Patient ID"
            }
        ));
        jScrollPane1.setViewportView(PersonDetailsTable);

        lblSearch.setForeground(new java.awt.Color(255, 255, 255));
        lblSearch.setText("Search for Patient ID:");

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        btnAddVS.setText("ADD");
        btnAddVS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVSActionPerformed(evt);
            }
        });

        btnViewVS.setText("VIEW ALL VITAL SIGNS");
        btnViewVS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewVSActionPerformed(evt);
            }
        });

        VitalSignsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Timestamp", "Body Temperature", "Status", "Respiratory Rate", "Status", "Blood Pressure", "Status", "Pulse Rate", "Status", "Overall Status", "Patient ID"
            }
        ));

        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnViewVSbyComm.setText("VIEW VITAL SIGNS BY COMMUNITY");
        btnViewVSbyComm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewVSbyCommActionPerformed(evt);
            }
        });

        txtSearchCommu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchCommuActionPerformed(evt);
            }
        });

        cbVS2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Body Temperature", "Respiratory Rate", "Blood Pressure", "Pulse Rate" }));

        lblCom.setForeground(new java.awt.Color(255, 255, 255));
        lblCom.setText("Community:");

        lblCount.setForeground(new java.awt.Color(255, 255, 255));
        lblCount.setText("COUNT:");

        txtCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCountActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon("/Users/sundermetpalli/Downloads/tableforvs.png")); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon("/Users/sundermetpalli/Downloads/patient.png")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);

    private void btnAddVSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVSActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = PersonDetailsTable.getSelectedRow();
        Person person = (Person) PersonDetailsTable.getValueAt(selectedRow, 0);
        Patient patient= person.getPatient();
        if(patient!=null)
        {
           
            try {
            int respiratoryRate = Integer.parseInt(txtRR1.getText());
            int pulseRate = Integer.parseInt(txtPR1.getText());
            int bloodPressure = Integer.parseInt(txtBP1.getText());
            int bodyTemp = Integer.parseInt(txtBT1.getText());
            
            VitalSigns vitalSign = patient.getVitalSignHistory().createAndAddVitalSign();
            vitalSign.setRespiratoryRate(respiratoryRate);
            vitalSign.setPulseRate(pulseRate);
            vitalSign.setBloodPressure(bloodPressure);
            vitalSign.setBodyTemp(bodyTemp);
            vitalSign.setTimestamp(new Date());
            
            populateVitalSignTable(person);
        
            txtRR1.setText("");
        
            txtPR1.setText("");
        
            txtBP1.setText("");
        
            txtBT1.setText("");
    }//GEN-LAST:event_btnAddVSActionPerformed

    private void btnViewVSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewVSActionPerformed
        // TODO add your handling code here:
        int selectedRow = PersonDetailsTable.getSelectedRow();
        Person person = (Person) PersonDetailsTable.getValueAt(selectedRow, 0);
        Patient patient= person.getPatient();
        if(patient!=null)
        {
            populateVitalSignTable(person);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Create a Patient ID.");
        }
        
    }//GEN-LAST:event_btnViewVSActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        DefaultTableModel md= (DefaultTableModel) VitalSignsTable.getModel();
        int selectedRow = VitalSignsTable.getSelectedRow();
        
        txtBT.setText(String.valueOf(md.getValueAt(selectedRow, 1)));
        txtStatusBT.setText(String.valueOf(md.getValueAt(selectedRow, 2)));
        txtRR.setText(String.valueOf(md.getValueAt(selectedRow, 3)));
        txtStatusRR.setText(String.valueOf(md.getValueAt(selectedRow, 4)));
        txtBP.setText(String.valueOf(md.getValueAt(selectedRow, 5)));
        txtStatusBP.setText(String.valueOf(md.getValueAt(selectedRow, 6)));
        txtPR.setText(String.valueOf(md.getValueAt(selectedRow, 7)));
        txtStatusPR.setText(String.valueOf(md.getValueAt(selectedRow, 8)));
        
    }//GEN-LAST:event_btnViewActionPerformed

    private void txtSearchCommuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchCommuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchCommuActionPerformed

    private void btnViewVSbyCommActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewVSbyCommActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel model = (DefaultTableModel) VitalSignsTable.getModel();
        model.setRowCount(0);
        ArrayList<Person> sc=personDirectory.sameCommunity(comm);
        for(Person person: sc){
          Patient patient= person.getPatient();
          long age=person.getAge();
           ArrayList<VitalSigns> vitalSignList = person.getPatient().getVitalSignHistory().getHistory();
           VitalSigns latestvitalsign=vitalSignList.get(vitalSignList.size()-1);
           if(BTStatus(age, latestvitalsign)=="Abnormal" && vsoption=="Body Temperature")
           {
                Object[] row = new Object[11];
                row[0] = latestvitalsign;
                row[1]=latestvitalsign.getBodyTemp();
                row[2]=BTStatus(age, latestvitalsign);
                row[3]=latestvitalsign.getRespiratoryRate();
                row[4]=BTStatus(age, latestvitalsign);
                row[5]=latestvitalsign.getBloodPressure();
                row[6]=BTStatus(age, latestvitalsign);
                row[7]=latestvitalsign.getPulseRate();
                row[8]=BTStatus(age, latestvitalsign);
                if(row[2]=="Abnormal" || row[4]=="Abnormal"|| row[6]=="Abnormal"|| row[8]=="Abnormal")
                    row[9]="Abnormal";
                else
                    row[9]="Normal";
                row[10]=person.getPatient().getPatientID();

                model.addRow(row);
            
           }
           else if (RRStatus(age, latestvitalsign)=="Abnormal" && vsoption=="Respiratory Rate"){
           
                Object[] row = new Object[11];
                row[0] = latestvitalsign;
                row[1]=latestvitalsign.getBodyTemp();
                row[2]=BTStatus(age, latestvitalsign);
                row[3]=latestvitalsign.getRespiratoryRate();
                row[4]=BTStatus(age, latestvitalsign);
                row[5]=latestvitalsign.getBloodPressure();
                row[6]=BTStatus(age, latestvitalsign);
                row[7]=latestvitalsign.getPulseRate();
                row[8]=BTStatus(age, latestvitalsign);
                if(row[2]=="Abnormal" || row[4]=="Abnormal"|| row[6]=="Abnormal"|| row[8]=="Abnormal")
                    row[9]="Abnormal";
                else
                    row[9]="Normal";
                row[10]=person.getPatient().getPatientID();

                model.addRow(row);
           } else if(BPStatus(age, latestvitalsign)=="Abnormal" && vsoption=="Blood Pressure"){
           Object[] row = new Object[11];
                row[0] = latestvitalsign;
                row[1]=latestvitalsign.getBodyTemp();
                row[2]=BTStatus(age, latestvitalsign);
                row[3]=latestvitalsign.getRespiratoryRate();
                row[4]=BTStatus(age, latestvitalsign);
                row[5]=latestvitalsign.getBloodPressure();
                row[6]=BTStatus(age, latestvitalsign);
                row[7]=latestvitalsign.getPulseRate();
                row[8]=BTStatus(age, latestvitalsign);
                if(row[2]=="Abnormal" || row[4]=="Abnormal"|| row[6]=="Abnormal"|| row[8]=="Abnormal")
                    row[9]="Abnormal";
                else
                    row[9]="Normal";
                row[10]=person.getPatient().getPatientID();

                model.addRow(row);}
           else if(PRStatus(age, latestvitalsign)=="Abnormal" && vsoption=="Pulse Rate"){
           Object[] row = new Object[11];
                row[0] = latestvitalsign;
                row[1]=latestvitalsign.getBodyTemp();
                row[2]=BTStatus(age, latestvitalsign);
                row[3]=latestvitalsign.getRespiratoryRate();
                row[4]=BTStatus(age, latestvitalsign);
                row[5]=latestvitalsign.getBloodPressure();
                row[6]=BTStatus(age, latestvitalsign);
                row[7]=latestvitalsign.getPulseRate();
                row[8]=BTStatus(age, latestvitalsign);
                if(row[2]=="Abnormal" || row[4]=="Abnormal"|| row[6]=="Abnormal"|| row[8]=="Abnormal")
                    row[9]="Abnormal";
                else
                    row[9]="Normal";
                row[10]=person.getPatient().getPatientID();

                model.addRow(row);}
               
          
          
        }
        
        txtCount.setText(String.valueOf(VitalSignsTable.getRowCount()));
        
    }//GEN-LAST:event_btnViewVSbyCommActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model= (DefaultTableModel) PersonDetailsTable.getModel();
        TableRowSorter<DefaultTableModel> tr= new TableRowSorter<DefaultTableModel>(model);
        String search=txtSearch.getText();
        PersonDetailsTable.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(search.trim(),6));
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCountActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtCountActionPerformed



 private void populatePatientsTable(ArrayList<Person> personList) {
        DefaultTableModel model = (DefaultTableModel) PersonDetailsTable.getModel();
        model.setRowCount(0);
        if(personList.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Create a Person!");
            return;
        }
        for (Person p : personList) {
            Object[] row = new Object[8];
            row[0] = p;
            row[1]=p.getLastName();
            row[2]=p.getAge();
            row[3]=p.getCity();
            row[4]=p.getCommunity();
            row[5]=p.getHouse();
            if(p.getPatient()!=null)
            row[6]=p.getPatient().getPatientID();
            else
            row[6]="Patient ID not available.";
            row[7]=p.getStateID();
            model.addRow(row);

           
        }
    }
 
   private void populateVitalSignTable(Person person) {
        
        DefaultTableModel model = (DefaultTableModel) VitalSignsTable.getModel();
        model.setRowCount(0);
        if (person != null) {
            long patientAge = person.getAge();
            ArrayList<VitalSigns> vitalSignList = person.getPatient().getVitalSignHistory().getHistory();
            
            if (vitalSignList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No vital signs found.");
                return;
            }
            for (VitalSigns vs : vitalSignList) {
                Object[] row = new Object[11];
                row[0] = vs;
                row[1]=vs.getBodyTemp();
                row[2]=BTStatus(patientAge, vs);
                row[3]=vs.getRespiratoryRate();
                row[4]=BTStatus(patientAge, vs);
                row[5]=vs.getBloodPressure();
                row[6]=BTStatus(patientAge, vs);
                row[7]=vs.getPulseRate();
                row[8]=BTStatus(patientAge, vs);
                if(row[2]=="Abnormal" || row[4]=="Abnormal"|| row[6]=="Abnormal"|| row[8]=="Abnormal")
                    row[9]="Abnormal";
                else
                    row[9]="Normal";
                row[10]=person.getPatient().getPatientID();

                model.addRow(row);
            }
        }
    }
   


public String BTStatus(long pAge, VitalSigns vs) {

        String BTStatus = "Abnormal";
        int BT=vs.getBodyTemp();
        if(BT<=37 && BT>=36)
        BTStatus="Normal";
        return BTStatus;
    }
   
}
